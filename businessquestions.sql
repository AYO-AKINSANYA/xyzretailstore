-- BUSINESS QUESTION

-- Sales Analysis
-- Total Revenue in xyzretailstore
SELECT *
FROM xyzretailstore.orders;

SELECT SUM(total_amount) AS totalrevenue
FROM orders;

-- Most revenue in product category
SELECT p.category, SUM(p.price * oi.quantity) AS total_revenue
FROM product AS p
JOIN
order_items AS oi
ON
p.product_id = oi.product_id
GROUP BY 
p.category
ORDER BY
total_revenue DESC
LIMIT 1;

-- Top 5 best-selling products based on quantity sold
SELECT p.product_name, SUM(oi.quantity) AS totalquantitysold
FROM product AS p
JOIN
order_items AS oi
ON
p.product_id = oi.product_id
GROUP BY
p.product_name
ORDER BY 
totalquantitysold DESC
LIMIT 5;


-- Customer insight---
-- No of purchases by unique customers
SELECT COUNT(DISTINCT customer_id) AS uniquecustomers
FROM orders;

-- City with the highest no of customers
SELECT city, COUNT(*) AS numberofcustomers
FROM customer
GROUP BY city;
-- LIMIT 1;

-- Average Age of customers 
SELECT AVG(age) AS averageage
FROM customer;


-- Order Analysis
-- No of orders placed in the last year
SELECT COUNT(*) AS no_of_orders_last_year
FROM orders
WHERE order_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR);

-- Average order values
SELECT AVG(total_amount) AS averageordervalue
FROM orders;

-- Month with the highest total sales
SELECT DATE_FORMAT(order_date, '%Y-%m') AS ordermonth, SUM(total_amount) AS total_sales
FROM orders
GROUP BY ordermonth
ORDER BY total_sales DESC
LIMIT 1;


-- Product performance
-- Never Sold products
SELECT p.product_name, p.product_id, oi.product_id
FROM product AS p
LEFT JOIN 
order_items AS oi 
ON
p.product_id = oi.product_id
WHERE oi.product_id IS NULL;

-- Top 3 customers who have spent the most
SELECT c.customer_name, SUM(o.total_amount) AS total_spent
FROM orders o
JOIN 
customer c 
ON 
o.customer_id = c.customer_id
GROUP BY c.customer_id, c.customer_name
ORDER BY total_spent DESC
LIMIT 3;

-- Product with the highest unit price
SELECT product_name, price
FROM product
ORDER BY price DESC
LIMIT 1;


-- Customer Segmentation
-- Total revenue generated by each group
SELECT 
CASE 
WHEN age BETWEEN 18 AND 25 THEN '18-25'
WHEN age BETWEEN 26 AND 35 THEN '26-35'
WHEN age BETWEEN 36 AND 45 THEN '36-45'
WHEN age BETWEEN 46 AND 55 THEN '46-55'
WHEN age > 55 THEN '55+'
ELSE 'Unknown'
END AS agegroup, SUM(o.total_amount) AS total_revenue
FROM customer AS c
JOIN 
orders AS o 
ON 
c.customer_id = o.customer_id
GROUP BY 
agegroup
ORDER BY
agegroup;

-- Percentage of male and female customers
SELECT gender, COUNT(*) * 100.0 / (SELECT COUNT(*) FROM customer) AS percentage
FROM customer
GROUP BY gender;



